1. What are the ELF magic numbers?
   
   The elf magic numbers are held in the e_ident
   array. There are 4 magic number bytes: 0x7f, 'E', 'L', 'F'. 

2. What is the difference between UIO_USERISPACE and UIO_USERSPACE? When
   should one use UIO_SYSSPACE instead?

   UIO_USERISPACE holds user process code
   UIO_USERSPACE holds user process data
   UIO_SYSSPACE should be used when transferring data from kernel source or
   to kernel destination.

3. Why can the struct uio that is used to read in a segment be allocated
   on the stack in load_segment() (i.e., where does the memory read actually
   go)?

   The struct uio can be allocated on the stack in load_segment() because the
   the memory read actually goes in to userspace.


4. In runprogram(), why is it important to call vfs_close() before going to 
   usermode?

   We first call vfs_open on the user program. This will allocate some
   resources that should be freed with vfs_close before we go to usermode. 
   If we go to
   usermode without closing this file object, we will not return to this
   function to free the memory associated with this vnode.


5. What function forces the processor to switch into usermode? Is this 
   function machine dependent?

   According to runprogram.c, the function md_usermode forces the processor
   to switch in to usermode. This function's code is not machine dependent,
   however the function does rely on machine dependent macros, for example
   <machine/trapframe.h>



6. In what file are copyin and copyout defined? memmove? Why can't copyin
   and copyout be implemented as simply as memmove?

   copyin and copyout are declared in the <copyinout.h> header file and
   defined in the copyinout.c file. Memmove is declared in the <string.h>
   header file. It is defined in the memmove.c file. Memmove will simply 
   copy a block of memory from some source to some destination. According
   to copyinout.c, these functions are arranged
   to prevent fatal kernel memory faults if invalid addresses are supplied 
   by the user level code. Memmove does not perform this check. 


7. What (briefly) is the purpose of userptr_t?
   
   If a pointer is coming from user space, we can access it through
   userptr_t to ensure that it is coming from userspace. 




8. What is the numerical value of the exception code for a MIPS system call?

   According to trapframe.h, the value of the exception code for a MIPS
   system call is defined as:
   #define EX_SYS 8
   The numerical value is 8.



9. How many bytes is an instruction in MIPS? (Answer this by reading 
   syscall() carefully, not by looking somewhere else.)
   
   The instruction size is 4 bytes



10. Why do you "probably want to change" the implementation of 
    kill_curthread()?
    
    According to trap.c, kill_curthread() is called when user-level code 
    hits a fatal fault. The current implementation
    causes the kernel to panic and crash. We want to change this 
    implementation so that the kernel can elegantly handle this 
    fault and continue without crashing the kernel. 



11. What would be required to implement a system call that took more than 
    4 arguments?

    According to syscall.c, in os161 we do not have system calls that
    require more than 4 arguments. If we did have more than 4 arguments,
    we would need to fetch them from the user-level stack.






12. What is the purpose of the SYSCALL macro?
    
    The SYSCALL macro is defined in syscalls-mips.S and takes two 
    arguments: sym and num. It loads the syscall number in to v0 where the 
    kernel expects to find it and then jumps to the shared syscall code.




13. What is the MIPS instruction that actually triggers a system call?
    (Answer this by reading the source in this directory, not looking
    somewhere else.)

    In syscalls-mips.S the line of code 'syscall' directly following the
    label '__syscall:' is resposible for triggering the system call.




14. After reading syscalls-mips.S and syscall.c, you should be prepared to
    answer the following question: OS/161 supports 64-bit values; lseek() 
    takes and returns a 64-bit offset value. Thus, lseek() takes a 32-bit 
    file handle (arg0), a 64-bit offset (arg1), a 32-bit whence (arg2), and 
    needs to return a 64-bit offset value. In void syscall(struct trapframe 
    *tf) where will you find each of the three arguments (in which registers) 
    and how will you return the 64-bit offset?

    arg0 is found in register a0, arg1 is found in registers a2 and a3 (an 
    aligned pair of registers). arg2 is found on the user-level stack. 
    register a1 is not used. On success, we return the 64bit offset in v0 
    and v1, on failure we return in v0.




15. As you were reading the code in runprogram.c and loadelf.c, you probably 
    noticed how the kernel manipulates the files. Which kernel function is 
    called to open a file? Which macro is called to read the file? What about 
    to write a file? 

    In runprogram.c, we can see that the kernel function 'vfs_open' is used 
    to open files. In loadelf.c, we can see that VOP_READ is used to read 
    files and VOP_WRITE is used to write to files. According to vnode.h,
    a struct vnode is an abstract representation of an 
    open file. 

16. What is the purpose of VOP_INCREF and VOP_DECREF?
    
    According to vnode.c, vnode_incref() and vnode_decref are called by
    VOP_INCREF and VOP_DECREF. The job of these
    functions is to increment and decrement the reference count on a vnode. 




